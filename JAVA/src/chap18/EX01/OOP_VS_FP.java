package chap18.EX01;

/* OOP (Object orient Program)
 * 		모든 함수(메소드)는 객체 내부에 존재
 * 		함수는 클래스, 인터페이스 내에 존재하는 실행 코드
 * 		자바는 OOP이다.
 * FP (Function Program)
 * 		함수에 기능을 넣어 바로 사용
 * 
 * 
 * 람다식
 * 		자바에서 함수형프로그래밍이 가능하도록 지원해주는 하나의 기능
 * 		함수형 인터페이스가 필요
 * 		함수형 인터페이스란, 단 하나의 추상메소드가 정의된 인터페이스
 * 		구현부가 없는 추상메소드에 람다식으로 기능을 부여해서 작동시키는 문법
 * 		람다식은 가능한 축약된 문법을 사용 (생략가능한 것들을 모두 생략)
 * 		람다식은 자바에서 내부적으로 익명클래스로 변환되어 처리된다.
 * 		FP가 아니지만 FP처럼 처리하는 것으로 보이게 축약해서 사용 (실제로는 객체가 생성된다.)
 * 		람다식은 함수형 인터페이스에서 익명 클래스로 변환이 가능하다.
 * 		람다식은 함수형 인터페이스의 구현된 익명 클래스로 람다식으로 축약
 * 		자바는 새로운 함수 문법을 정의한 것이 아니라 '이미 있는 인터페이스'를 빌어 람다식을 표현하는 것
 */



@FunctionalInterface						// 함수형 인터페이스를 선언해주는 역할
interface A {								// 함수형 인터페이스 : 추상메서드 하나만 정의된 인터페이스
	void abc();								// public abstract가 생략되어 있음
}

/*인터페이스에 정의된 추상메소드를 구현하는 방법
 * 1. 인터페이스의 메소드를 구현하는 클래스 생성
 */


class B implements A {
	@Override
	public void abc() {
		System.out.println("A 인터페이스 abc()메소드 오버라이딩 구현");
	}
}



public class OOP_VS_FP {
	public static void main(String[] args) {
		
		// 자바는 객체지향 프로그램이므로 모든 함수(메소드)는 클래스 내부에 있고 객체를 생성 후 호출할 수 있다.
		// 객체 생성없이 함수명으로 바로 호출이 불가능하다.
		
		// 1. 객체지향프로그래밍(OOP) 문법1 : 객체 생성 후, 사용
		
		A a1 = new B();
		a1.abc();
		
		// 2. 객체지향프로그래밍(OOP) 문법2 : 익명 클래스를 생성해서 사용
		
		A a2 = new A() {
			@Override
			public void abc() {
				System.out.println("A 인터페이스 abc()메소드 익명클래스로 구현");
			}
		};
		
		a2.abc();
		
		System.out.println("================================================");
		
		
		// 3. 람다식(함수적) 프로그래밍(FP) 문법 
		
		A a3 = () -> {System.out.println("A 인터페이스 abc()메소드 람다식 구현");};					// **람다식에 사용되는 인터페이스는 함수형 인터페이스여야 한다.ㅣ
		
		a3.abc();
		
		
	}
}
